'use client'

import { useState, useEffect } from 'react'
import { Shield, Zap, Users, Coins, AlertTriangle } from 'lucide-react'

interface GameAreaProps {
  level: number
  onLevelComplete: (xp: number) => void
}

interface GameCharacter {
  id: string
  name: string
  position: { x: number; y: number }
  type: 'defender' | 'hacker' | 'user' | 'validator'
  status: 'idle' | 'attacking' | 'defending' | 'success' | 'failed'
}

const GameArea: React.FC<GameAreaProps> = ({ level, onLevelComplete }) => {
  const [characters, setCharacters] = useState<GameCharacter[]>([])
  const [gameState, setGameState] = useState<'idle' | 'simulating' | 'success' | 'failed'>('idle')
  const [scenario, setScenario] = useState('')

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
  useEffect(() => {
    initializeLevel(level)
  }, [level])

  const initializeLevel = (levelNum: number) => {
    switch (levelNum) {
      case 1:
        setScenario('–ö–æ—à–µ–ª–µ–∫ –≤ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏')
        setCharacters([
          { id: '1', name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', position: { x: 20, y: 50 }, type: 'user', status: 'idle' },
          { id: '2', name: '–•–∞–∫–µ—Ä', position: { x: 80, y: 30 }, type: 'hacker', status: 'idle' },
          { id: '3', name: '–ó–∞—â–∏—Ç–Ω–∏–∫', position: { x: 50, y: 70 }, type: 'defender', status: 'idle' }
        ])
        break
      case 2:
        setScenario('–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ')
        setCharacters([
          { id: '1', name: '–ò–∑–±–∏—Ä–∞—Ç–µ–ª—å 1', position: { x: 15, y: 40 }, type: 'user', status: 'idle' },
          { id: '2', name: '–ò–∑–±–∏—Ä–∞—Ç–µ–ª—å 2', position: { x: 15, y: 60 }, type: 'user', status: 'idle' },
          { id: '3', name: '–ù–∞—Ä—É—à–∏—Ç–µ–ª—å', position: { x: 85, y: 50 }, type: 'hacker', status: 'idle' },
          { id: '4', name: '–í–∞–ª–∏–¥–∞—Ç–æ—Ä', position: { x: 50, y: 20 }, type: 'validator', status: 'idle' }
        ])
        break
      default:
        setScenario('–ë–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å')
        setCharacters([
          { id: '1', name: '–ò–≥—Ä–æ–∫', position: { x: 50, y: 50 }, type: 'defender', status: 'idle' }
        ])
    }
    setGameState('idle')
  }

  const simulateGame = () => {
    setGameState('simulating')
    // –ê–Ω–∏–º–∞—Ü–∏—è —Å–∏–º—É–ª—è—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    setCharacters(prev => prev.map(char => ({
      ...char,
      status: 'attacking'
    })))

    // –°–∏–º—É–ª—è—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (—É–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
    setTimeout(() => {
      // –ë–æ–ª—å—à–µ —à–∞–Ω—Å–æ–≤ —É—Å–ø–µ—Ö–∞ –¥–ª—è –ø–µ—Ä–≤—ã—Ö —É—Ä–æ–≤–Ω–µ–π
      const successRate = level <= 2 ? 0.8 : 0.7
      const success = Math.random() < successRate
      
      setGameState(success ? 'success' : 'failed')
      setCharacters(prev => prev.map(char => ({
        ...char,
        status: success ? 'success' : 'failed'
      })))

      if (success) {
        setTimeout(() => {
          // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è
          const xpReward = level * 25 + 25
          onLevelComplete(xpReward)
        }, 1500)
      }
    }, 2500)
  }

  const getCharacterIcon = (type: string) => {
    switch (type) {
      case 'defender': return <Shield className="w-6 h-6 text-blue-400" />
      case 'hacker': return <Zap className="w-6 h-6 text-red-400" />
      case 'user': return <Users className="w-6 h-6 text-green-400" />
      case 'validator': return <Coins className="w-6 h-6 text-yellow-400" />
      default: return <AlertTriangle className="w-6 h-6 text-gray-400" />
    }
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'attacking': return 'animate-pulse border-red-400 bg-red-400/20'
      case 'defending': return 'animate-pulse border-blue-400 bg-blue-400/20'
      case 'success': return 'border-green-400 bg-green-400/20 animate-bounce'
      case 'failed': return 'border-red-600 bg-red-600/20'
      default: return 'border-gray-400 bg-gray-400/10'
    }
  }

  return (
    <div className="h-full game-panel p-6 flex flex-col">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è */}
      <div className="mb-4">
        <h3 className="text-xl font-bold text-game-text mb-2">–£—Ä–æ–≤–µ–Ω—å {level}: {scenario}</h3>
        <div className="flex items-center space-x-4">
          <span className={`px-3 py-1 rounded-full text-xs font-semibold ${
            gameState === 'idle' ? 'bg-gray-600 text-gray-300' :
            gameState === 'simulating' ? 'bg-yellow-600 text-yellow-100' :
            gameState === 'success' ? 'bg-green-600 text-green-100' :
            'bg-red-600 text-red-100'
          }`}>
            {gameState === 'idle' ? '–û–∂–∏–¥–∞–Ω–∏–µ' :
             gameState === 'simulating' ? '–°–∏–º—É–ª—è—Ü–∏—è' :
             gameState === 'success' ? '–£—Å–ø–µ—Ö' : '–ü—Ä–æ–≤–∞–ª'}
          </span>
          
          {gameState === 'idle' && (
            <button 
              onClick={simulateGame}
              className="game-button text-sm"
            >
              –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é
            </button>
          )}
        </div>
      </div>

      {/* –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ */}
      <div className="flex-1 relative bg-slate-800/30 rounded-lg border border-game-border overflow-hidden">
        {/* –°–µ—Ç–∫–∞ –±–ª–æ–∫—á–µ–π–Ω–∞ –≤ —Ñ–æ–Ω–µ */}
        <div className="absolute inset-0 opacity-10">
          <div className="grid grid-cols-8 grid-rows-6 h-full">
            {Array.from({ length: 48 }).map((_, i) => (
              <div key={i} className="border border-blue-400/20"></div>
            ))}
          </div>
        </div>

        {/* –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ */}
        {characters.map((character) => (
          <div
            key={character.id}
            className={`absolute w-16 h-16 rounded-lg border-2 flex items-center justify-center transition-all duration-500 ${getStatusColor(character.status)}`}
            style={{
              left: `${character.position.x}%`,
              top: `${character.position.y}%`,
              transform: 'translate(-50%, -50%)'
            }}
          >
            {getCharacterIcon(character.type)}
            <div className="absolute -bottom-6 left-1/2 transform -translate-x-1/2">
              <span className="text-xs text-game-text bg-game-bg px-2 py-1 rounded whitespace-nowrap">
                {character.name}
              </span>
            </div>
          </div>
        ))}

        {/* –ê–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã */}
        {gameState === 'simulating' && (
          <div className="absolute inset-0 flex items-center justify-center">
            <div className="w-32 h-32 border-4 border-game-accent border-t-transparent rounded-full animate-spin"></div>
          </div>
        )}

        {gameState === 'success' && (
          <div className="absolute inset-0 bg-green-500/20 flex items-center justify-center">
            <div className="text-4xl">üéâ</div>
          </div>
        )}

        {gameState === 'failed' && (
          <div className="absolute inset-0 bg-red-500/20 flex items-center justify-center">
            <div className="text-4xl">üí•</div>
          </div>
        )}
      </div>
    </div>
  )
}

export default GameArea 