'use client'

import React, { useState, useEffect, useRef } from 'react'
import GameHeader from '@/components/GameHeader'
import CodeEditor from '@/components/CodeEditor'
import dynamic from 'next/dynamic'
const FlexboxDefenseGame = dynamic(() => import('@/components/FlexboxDefenseGame'), {
  ssr: false,
  loading: () => <div className="flex-1 min-h-[220px] bg-slate-800/40 rounded-lg flex items-center justify-center text-gray-400">–ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä—ã‚Ä¶</div>,
})
import Console from '@/components/Console'
import LevelInfo from '@/components/LevelInfo'
import AIAssistant from '@/components/AIAssistant'
import { validateSolidityCode, getCodeQualityScore, isCodeValid } from '@/utils/codeValidator'
import { LEVEL_CONFIGS } from '@/data/levelConfigs'
import { GameStorage } from '@/lib/gameStorage'
import type { ConsoleLog } from '@/types/game'
import UsernameModal from '@/components/UsernameModal'

export default function GamePage() {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
  const [gameProgress, setGameProgress] = useState(() => GameStorage.getDefaultProgress())
  const [currentLevel, setCurrentLevel] = useState(1)
  const [playerXP, setPlayerXP] = useState(0)
  const [isClient, setIsClient] = useState(false)

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ç–æ–ª—å–∫–æ –∏–∑ –ë–î (client-side)
  useEffect(() => {
    setIsClient(true)
    if (typeof window !== 'undefined') {
      const localProgress = GameStorage.getDefaultProgress()
      const hasName = GameStorage.hasCustomPlayerName()
      if (!hasName) {
        setShowUsernameModal(true)
      }
      ;(async () => {
        const name = (hasName ? localStorage.getItem('smart-you-player-name') : null) || localProgress.player.name
        const fromDb = await GameStorage.getProgressFromDB(name)
        setGameProgress(fromDb)
        setCurrentLevel(fromDb.currentLevel)
        setPlayerXP(fromDb.totalXP)
      })()
    }
  }, [])
  const [code, setCode] = useState('')
  const [consoleLogs, setConsoleLogs] = useState<ConsoleLog[]>([])
  const [isCompiling, setIsCompiling] = useState(false)
  const [currentErrors, setCurrentErrors] = useState<string[]>([])
  const [lastValidationResult, setLastValidationResult] = useState<{isValid: boolean, score: number}>({
    isValid: false,
    score: 0
  })
  const [startSignal, setStartSignal] = useState(0)
  const [showUsernameModal, setShowUsernameModal] = useState(false)
  const [autosaveState, setAutosaveState] = useState<'idle' | 'saving' | 'saved' | 'error'>('idle')
  const [lastSavedAt, setLastSavedAt] = useState<Date | undefined>(undefined)
  const autosaveTimer = useRef<NodeJS.Timeout | null>(null)

  const currentLevelData = LEVEL_CONFIGS.find(level => level.id === currentLevel)

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–¥ —É—Ä–æ–≤–Ω—è –∏–∑ –ë–î
  useEffect(() => {
    if (currentLevelData) {
      ;(async () => {
        let loaded = currentLevelData.initialCode
        try {
          if (typeof window !== 'undefined') {
            const name = localStorage.getItem('smart-you-player-name') || GameStorage.getDefaultProgress().player.name
            const res = await fetch(`/api/level-code?name=${encodeURIComponent(name)}&level=${currentLevel}`)
            const data = await res.json()
            if (data?.ok && typeof data.code === 'string' && data.code.length > 0) {
              loaded = data.code
            }
          }
        } catch {}
        setCode(loaded)
      })()
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
      setCurrentErrors([])
      setLastValidationResult({ isValid: false, score: 0 })
      setConsoleLogs([]) // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
      addConsoleLog('info', `üìö –ó–∞–≥—Ä—É–∂–µ–Ω —É—Ä–æ–≤–µ–Ω—å ${currentLevel}: ${currentLevelData.title}`)
      addConsoleLog('info', `üéØ –¶–µ–ª—å: ${currentLevelData.description}`)
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ (–∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏)
      if (isClient && currentLevel !== 1) {
        GameStorage.setCurrentLevel(currentLevel)
      }
    }
  }, [currentLevel, isClient])

  // –î–µ–±–∞—É–Ω—Å-–∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ –ø–æ —Ç–µ–∫—É—â–µ–º—É —É—Ä–æ–≤–Ω—é –≤ –ë–î (300‚Äì500–º—Å)
  useEffect(() => {
    if (typeof window === 'undefined' || currentLevel <= 0) return
    if (autosaveTimer.current) clearTimeout(autosaveTimer.current)
    setAutosaveState('saving')
    autosaveTimer.current = setTimeout(async () => {
      try {
        const name = localStorage.getItem('smart-you-player-name') || GameStorage.getDefaultProgress().player.name
        const res = await fetch('/api/level-code', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ name, levelId: currentLevel, code: code || '' })
        })
        if (!res.ok) throw new Error('save failed')
        setAutosaveState('saved')
        setLastSavedAt(new Date())
      } catch {
        setAutosaveState('error')
      }
    }, 400)
    return () => {
      if (autosaveTimer.current) clearTimeout(autosaveTimer.current)
    }
  }, [code, currentLevel])

  const addConsoleLog = (type: 'info' | 'error' | 'success' | 'warning', message: string) => {
    setConsoleLogs((prev: ConsoleLog[]) => [...prev, { type, message, timestamp: new Date() }])
  }

  const handleRunCode = async () => {
    if (!currentLevelData) return
    
    setIsCompiling(true)
    addConsoleLog('info', '–ê–Ω–∞–ª–∏–∑ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞...')
    
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —É–ª—É—á—à–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏
      const validationResult = validateSolidityCode(code, currentLevel)
      
      addConsoleLog('info', `–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –†–µ–∑—É–ª—å—Ç–∞—Ç: ${validationResult.score}%`)
      addConsoleLog('info', `–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —É—Ä–æ–≤–Ω—é: ${validationResult.levelSpecificChecks.overallCompliance.toFixed(0)}%`)
      
      if (validationResult.errors.length > 0) {
        validationResult.errors.forEach(error => 
          addConsoleLog('error', `–°—Ç—Ä–æ–∫–∞ ${error.line}: ${error.message}`)
        )
        setCurrentErrors(validationResult.errors.map(e => e.message))
      } else {
        setCurrentErrors([])
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –∏–≥—Ä—ã
      setLastValidationResult({
        isValid: validationResult.isValid,
        score: validationResult.score
      })
      
      if (validationResult.warnings.length > 0) {
        validationResult.warnings.forEach(warning => 
          addConsoleLog('warning', `–°—Ç—Ä–æ–∫–∞ ${warning.line}: ${warning.message}`)
        )
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é (—Ç–æ–ª—å–∫–æ –≤—ã—Å–æ–∫–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞)
      if (validationResult.suggestions.length > 0) {
        validationResult.suggestions
          .filter(s => s.priority === 'high')
          .slice(0, 3) // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 3 –ø–æ–¥—Å–∫–∞–∑–æ–∫
          .forEach(suggestion => addConsoleLog('info', `üí° ${suggestion.message}`))
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–æ–∫ —É—Ä–æ–≤–Ω—è
      const levelConfig = LEVEL_CONFIGS.find(l => l.id === currentLevel)
      if (levelConfig) {
        addConsoleLog('info', `üéØ –¢–µ–º–∞: ${levelConfig.title}`)
        
        const requiredElements = validationResult.levelSpecificChecks.requiredElements
        const passedChecks = Object.values(requiredElements).filter(Boolean).length
        const totalChecks = Object.keys(requiredElements).length
        
        if (totalChecks > 0) {
          addConsoleLog('info', `üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã: ${passedChecks}/${totalChecks}`)
        }
        
        const securityPatterns = validationResult.levelSpecificChecks.securityPatterns
        const passedSecurity = Object.values(securityPatterns).filter(Boolean).length
        const totalSecurity = Object.keys(securityPatterns).length
        
        if (totalSecurity > 0) {
          addConsoleLog('info', `üîí –ü–∞—Ç—Ç–µ—Ä–Ω—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: ${passedSecurity}/${totalSecurity}`)
        }
      }

      // –ò—Ç–æ–≥–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      if (validationResult.isValid && validationResult.score >= 60) {
        addConsoleLog('success', '‚úÖ –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω!')
        addConsoleLog('info', 'üéÆ –ó–∞—â–∏—Ç–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –≥–æ—Ç–æ–≤—ã –∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏!')
        if (validationResult.score >= 80) {
          addConsoleLog('success', 'üî• –û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å –∑–∞—â–∏—Ç—ã!')
        }
        // –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
        setStartSignal(Date.now())
      } else if (validationResult.score >= 40) {
        addConsoleLog('warning', '‚ö†Ô∏è –ö–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –∑–∞—â–∏—Ç–∞ –æ—Å–ª–∞–±–ª–µ–Ω–∞ –∏–∑-–∑–∞ –Ω–µ–¥–æ—á–µ—Ç–æ–≤')
        addConsoleLog('info', `–ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞: ${validationResult.score}%`)
      } else {
        addConsoleLog('error', '‚ùå –ö–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏. –ó–∞—â–∏—Ç–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã!')
      }

    } catch (error: any) {
      addConsoleLog('error', `–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`)
    } finally {
      setIsCompiling(false)
    }
  }

  const handleLevelComplete = (xp: number) => {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    const updatedProgress = GameStorage.completeLevel(currentLevel, xp)
    setGameProgress(updatedProgress)
    setPlayerXP(updatedProgress.totalXP)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    const unlockedAchievements = GameStorage.checkAchievements(updatedProgress, currentLevel)
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
    unlockedAchievements.forEach(achievement => {
      addConsoleLog('success', `üèÜ –ü–æ–ª—É—á–µ–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: "${achievement.title}" (+${achievement.xpReward} XP)`)
    })
    
    addConsoleLog('success', `üéâ –£—Ä–æ–≤–µ–Ω—å ${currentLevel} –∑–∞–≤–µ—Ä—à–µ–Ω! +${xp} XP`)
    addConsoleLog('success', `üèÜ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–±–µ–¥–æ–π!`)
    
    if (currentLevel < LEVEL_CONFIGS.length) {
      addConsoleLog('info', `‚è≥ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...`)
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => {
        const nextLevel = currentLevel + 1
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –≤ localStorage
        const updatedProgress = GameStorage.setCurrentLevel(nextLevel)
        setGameProgress(updatedProgress)
        setCurrentLevel(nextLevel)
        
        addConsoleLog('success', `üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —É—Ä–æ–≤–µ–Ω—å ${nextLevel}!`)
        addConsoleLog('info', `üîì –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!`)
      }, 3000)
    } else {
      addConsoleLog('success', 'üèÜ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—Å–µ —É—Ä–æ–≤–Ω–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!')
      addConsoleLog('success', 'üëë –í—ã –∑–∞—Å–ª—É–∂–∏–ª–∏ –∑–≤–∞–Ω–∏–µ "–°—Ç—Ä–∞–∂ –±–ª–æ–∫—á–µ–π–Ω–∞"!')
      addConsoleLog('success', 'üéØ –í—ã –æ—Å–≤–æ–∏–ª–∏ –≤—Å–µ –æ—Å–Ω–æ–≤—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤!')
    }
  }

  if (!currentLevelData) {
    return <div className="h-screen flex items-center justify-center bg-game-bg">
      <div className="text-game-text">–£—Ä–æ–≤–µ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω</div>
    </div>
  }

  return (
    <div className="min-h-screen flex flex-col bg-game-bg">
      {/* Header */}
              <GameHeader 
          currentLevel={currentLevel}
          playerXP={playerXP}
          completedLevels={gameProgress.completedLevels}
          onLevelChange={setCurrentLevel}
        />
      
      {/* Main Game Layout */}
      <div className="flex-1 flex flex-col md:flex-row gap-2 md:gap-4 p-2 md:p-4 min-h-0">
        {/* –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –†–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–¥–∞ + –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Ä–æ–≤–Ω–µ */}
        <div className="w-full md:w-1/2 flex flex-col gap-2 md:gap-4 min-h-0">
          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Ä–æ–≤–Ω–µ */}
          <div className="h-auto md:h-80 overflow-y-auto">
            <LevelInfo level={currentLevelData} />
          </div>
          
          {/* –†–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–¥–∞ */}
          <div className="flex-1 min-h-[220px] sm:min-h-[260px] md:min-h-0">
                      <CodeEditor
            code={code}
              onChange={setCode}
            onRun={handleRunCode}
            isLoading={isCompiling}
            level={currentLevel}
              onConsoleMessage={(type, message) => addConsoleLog(type, message)}
            autosaveState={autosaveState}
            lastSavedAt={lastSavedAt}
          />
          </div>
        </div>
        
        {/* –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –ò–≥—Ä–∞ + –ö–æ–Ω—Å–æ–ª—å */}
        <div className="w-full md:w-1/2 flex flex-col gap-2 md:gap-4 min-h-0">
          {/* –ò–≥—Ä–æ–≤–∞—è –æ–±–ª–∞—Å—Ç—å */}
          <div className="flex-1 min-h-[220px] sm:min-h-[260px] md:min-h-0">
            <FlexboxDefenseGame 
              level={currentLevel}
              isCodeValid={lastValidationResult.isValid}
              codeScore={lastValidationResult.score}
              onGameComplete={(success) => {
                if (success) {
                  const xpReward = currentLevelData?.xpReward || 50
                  handleLevelComplete(xpReward)
                }
              }}
              onGameStart={() => {
                addConsoleLog('info', 'üéÆ –ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞! –ó–∞—â–∏—â–∞–π—Ç–µ –±–ª–æ–∫—á–µ–π–Ω!')
              }}
              startSignal={startSignal}
            />
          </div>
          
          {/* –ö–æ–Ω—Å–æ–ª—å */}
          <div className="h-auto md:h-72 lg:h-80 xl:h-96">
            <Console 
              logs={consoleLogs}
              onClear={() => setConsoleLogs([])}
            />
          </div>
        </div>
      </div>

      {/* AI –ü–æ–º–æ—â–Ω–∏–∫ */}
      <AIAssistant
        currentLevel={currentLevel}
        code={code}
        errors={currentErrors}
        onHintRequest={handleRunCode}
      />

      <UsernameModal
        isOpen={showUsernameModal}
        onSubmit={(name) => {
          const updated = GameStorage.setPlayerName(name)
          setGameProgress(updated)
          setShowUsernameModal(false)
        }}
      />
    </div>
  )
} 