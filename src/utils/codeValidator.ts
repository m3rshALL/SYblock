import { ValidationRule } from '../types/game'
import { LEVEL_CONFIGS } from '../data/levelConfigs'

// üîç **–£–õ–£–ß–®–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –í–ê–õ–ò–î–ê–¶–ò–ò –ö–û–î–ê SMART YOU**

export interface ValidationResult {
  isValid: boolean
  score: number
  errors: ValidationError[]
  warnings: ValidationWarning[]
  suggestions: ValidationSuggestion[]
  levelSpecificChecks: LevelSpecificResult
}

export interface ValidationError {
  line: number
  column: number
  message: string
  type: 'syntax' | 'security' | 'requirement' | 'pattern'
  severity: 'error' | 'warning'
}

export interface ValidationWarning {
  line: number
  column: number
  message: string
  suggestion: string
}

export interface ValidationSuggestion {
  message: string
  example?: string
  priority: 'high' | 'medium' | 'low'
}

export interface LevelSpecificResult {
  levelId: number
  theme: string
  requiredElements: { [key: string]: boolean }
  securityPatterns: { [key: string]: boolean }
  overallCompliance: number
}

export class CodeValidator {
  private code: string
  private lines: string[]
  
  constructor(code: string) {
    this.code = code
    this.lines = code.split('\n')
  }

  // üéØ **–û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –í–ê–õ–ò–î–ê–¶–ò–ò**
  validateCode(level: number): ValidationResult {
    console.log(`üéÆ –ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è —É—Ä–æ–≤–Ω—è ${level}`);
    const levelConfig = LEVEL_CONFIGS.find(l => l.id === level)
    console.log(`üìã –ù–∞–π–¥–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:`, levelConfig ? `"${levelConfig.title}" (${levelConfig.validationRules.length} –ø—Ä–∞–≤–∏–ª)` : '–ù–ï –ù–ê–ô–î–ï–ù–ê!');
    
    const result: ValidationResult = {
      isValid: true,
      score: 0,
      errors: [],
      warnings: [],
      suggestions: [],
      levelSpecificChecks: {
        levelId: level,
        theme: levelConfig?.theme || 'unknown',
        requiredElements: {},
        securityPatterns: {},
        overallCompliance: 0
      }
    }

    // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
    this.validateSyntax(result)
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª —É—Ä–æ–≤–Ω—è
    if (levelConfig) {
      this.validateLevelRules(levelConfig.validationRules, result)
      this.validateLevelSpecific(levelConfig, result)
    }
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–ª
    this.calculateScore(result)
    
    return result
  }

  // üìù **–í–ê–õ–ò–î–ê–¶–ò–Ø –°–ò–ù–¢–ê–ö–°–ò–°–ê**
  private validateSyntax(result: ValidationResult): void {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å Solidity
    if (!this.code.includes('pragma solidity')) {
      result.errors.push({
        line: 1,
        column: 1,
        message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–∏–≤–∞ pragma solidity',
        type: 'syntax',
        severity: 'error'
      })
    }

    if (!this.code.includes('contract ')) {
      result.errors.push({
        line: 1,
        column: 1,
        message: '–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–æ–Ω—Ç—Ä–∞–∫—Ç',
        type: 'requirement',
        severity: 'error'
      })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å–∫–æ–±–æ–∫
    this.validateBraces(result)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–∫–∏ —Å –∑–∞–ø—è—Ç–æ–π
    this.validateSemicolons(result)
  }

  // üèõÔ∏è **–í–ê–õ–ò–î–ê–¶–ò–Ø –°–ü–ï–¶–ò–§–ò–ß–ï–°–ö–ò–• –ü–†–ê–í–ò–õ –£–†–û–í–ù–Ø**
  private validateLevelRules(rules: ValidationRule[], result: ValidationResult): void {
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º ${rules.length} –ø—Ä–∞–≤–∏–ª –¥–ª—è —É—Ä–æ–≤–Ω—è ${result.levelSpecificChecks.levelId}:`);
    
    rules.forEach((rule, index) => {
      const isValid = this.checkRule(rule)
      console.log(`   ${index + 1}. ${rule.type}: "${rule.value}" - ${isValid ? '‚úÖ' : '‚ùå'}`);
      
      if (!isValid) {
        console.log(`      ‚ùå –û—à–∏–±–∫–∞: ${rule.errorMessage}`);
        result.errors.push({
          line: this.findRuleLine(rule),
          column: 1,
          message: rule.errorMessage,
          type: 'requirement',
          severity: 'error'
        })
      }
    })
    
    console.log(`üéØ –ò—Ç–æ–≥–æ –æ—à–∏–±–æ–∫: ${result.errors.length}`);
  }

  // üéÆ **–í–ê–õ–ò–î–ê–¶–ò–Ø –°–ü–ï–¶–ò–§–ò–ö –ö–ê–ñ–î–û–ì–û –£–†–û–í–ù–Ø**
  private validateLevelSpecific(levelConfig: any, result: ValidationResult): void {
    switch (levelConfig.theme) {
      case 'wallet':
        this.validateWalletLevel(result)
        break
      case 'voting':
        this.validateVotingLevel(result)
        break
      case 'market':
        this.validateMarketLevel(result)
        break
      case 'dao':
        this.validateDAOLevel(result)
        break
      case 'security':
        this.validateSecurityLevel(result)
        break
    }
  }

  // üõ°Ô∏è **–£–†–û–í–ï–ù–¨ 1: WALLET PROTECTION**
  private validateWalletLevel(result: ValidationResult): void {
    const checks = {
      hasConstructor: this.checkConstructor(),
      hasOwnerVariable: this.checkOwnerVariable(),
      hasDepositFunction: this.checkFunction('deposit'),
      hasOnlyOwnerModifier: this.checkModifier('onlyOwner'),
      hasPayableFunction: this.checkPayable()
    }

    result.levelSpecificChecks.requiredElements = checks

    // –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞
    if (!checks.hasConstructor) {
      result.suggestions.push({
        message: '–î–æ–±–∞–≤—å—Ç–µ constructor() –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞',
        example: 'constructor() { owner = msg.sender; }',
        priority: 'high'
      })
    }

    if (!checks.hasOnlyOwnerModifier) {
      result.suggestions.push({
        message: '–°–æ–∑–¥–∞–π—Ç–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä onlyOwner –¥–ª—è –∑–∞—â–∏—Ç—ã —Ñ—É–Ω–∫—Ü–∏–π',
        example: 'modifier onlyOwner() { require(msg.sender == owner, "Not owner"); _; }',
        priority: 'high'
      })
    }

    if (!checks.hasPayableFunction) {
      result.suggestions.push({
        message: '–§—É–Ω–∫—Ü–∏—è deposit() –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å payable –¥–ª—è –ø—Ä–∏–µ–º–∞ —ç—Ñ–∏—Ä–∞',
        example: 'function deposit() public payable { }',
        priority: 'high'
      })
    }
  }

  // üó≥Ô∏è **–£–†–û–í–ï–ù–¨ 2: VOTING SYSTEM**
  private validateVotingLevel(result: ValidationResult): void {
    const checks = {
      hasMapping: this.checkMapping(),
      hasModifier: this.checkModifier('onlyOwner'),
      hasRequireStatements: this.checkRequireStatements(),
      hasVotingMapping: this.checkVotingMapping(),
      hasAccessControl: this.checkAccessControl()
    }

    result.levelSpecificChecks.requiredElements = checks

    if (!checks.hasModifier) {
      result.suggestions.push({
        message: '–î–æ–±–∞–≤—å—Ç–µ modifier onlyOwner –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞',
        example: 'modifier onlyOwner() { require(msg.sender == owner, "Not owner"); _; }',
        priority: 'high'
      })
    }

    if (!checks.hasRequireStatements) {
      result.suggestions.push({
        message: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ require() –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
        example: 'require(!hasVoted[msg.sender], "Already voted");',
        priority: 'high'
      })
    }
  }

  // üé® **–£–†–û–í–ï–ù–¨ 3: NFT MARKETPLACE**
  private validateMarketLevel(result: ValidationResult): void {
    const checks = {
      hasStruct: this.checkStruct(),
      hasEvents: this.checkEvents(),
      hasNFTStruct: this.checkNFTStruct(),
      hasMintFunction: this.checkFunction('mintNFT'),
      hasBuyFunction: this.checkFunction('buyNFT'),
      hasMetadata: this.checkMetadata()
    }

    result.levelSpecificChecks.requiredElements = checks

    if (!checks.hasStruct) {
      result.suggestions.push({
        message: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ struct –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã NFT',
        example: 'struct NFT { uint256 id; address owner; string metadata; uint256 price; bool forSale; }',
        priority: 'high'
      })
    }

    if (!checks.hasEvents) {
      result.suggestions.push({
        message: '–î–æ–±–∞–≤—å—Ç–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å NFT',
        example: 'event NFTMinted(uint256 id, address owner); event NFTSold(uint256 id, address buyer, uint256 price);',
        priority: 'high'
      })
    }
  }

  // üèõÔ∏è **–£–†–û–í–ï–ù–¨ 4: DAO GOVERNANCE**
  private validateDAOLevel(result: ValidationResult): void {
    const checks = {
      hasGovernanceTokens: this.checkGovernanceTokens(),
      hasProposalSystem: this.checkProposalSystem(),
      hasVotingMechanism: this.checkVotingMechanism(),
      hasTimelock: this.checkTimelock(),
      hasDelegation: this.checkDelegation()
    }

    result.levelSpecificChecks.requiredElements = checks

    if (!checks.hasGovernanceTokens) {
      result.suggestions.push({
        message: '–î–æ–±–∞–≤—å—Ç–µ —Å–∏—Å—Ç–µ–º—É —Ç–æ–∫–µ–Ω–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
        example: 'mapping(address => uint256) public tokens;',
        priority: 'high'
      })
    }

    if (!checks.hasProposalSystem) {
      result.suggestions.push({
        message: '–†–µ–∞–ª–∏–∑—É–π—Ç–µ —Å–∏—Å—Ç–µ–º—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π',
        example: 'struct Proposal { uint256 id; string description; uint256 votes; uint256 endTime; bool executed; }',
        priority: 'high'
      })
    }
  }

  // ‚ö° **–£–†–û–í–ï–ù–¨ 5: SECURITY PATTERNS**
  private validateSecurityLevel(result: ValidationResult): void {
    const securityChecks = {
      reentrancyGuard: this.checkReentrancyGuard(),
      checksEffectsInteractions: this.checkChecksEffectsInteractions(),
      circuitBreaker: this.checkCircuitBreaker(),
      accessControl: this.checkAccessControl(),
      inputValidation: this.checkInputValidation(),
      overflowProtection: this.checkOverflowProtection()
    }

    result.levelSpecificChecks.securityPatterns = securityChecks

    if (!securityChecks.reentrancyGuard) {
      result.suggestions.push({
        message: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ReentrancyGuard –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞',
        example: 'import "@openzeppelin/contracts/security/ReentrancyGuard.sol";',
        priority: 'high'
      })
    }

    if (!securityChecks.checksEffectsInteractions) {
      result.suggestions.push({
        message: '–°–ª–µ–¥—É–π—Ç–µ –ø–∞—Ç—Ç–µ—Ä–Ω—É Checks-Effects-Interactions',
        example: '// 1. Checks: require(...); 2. Effects: state changes; 3. Interactions: external calls',
        priority: 'high'
      })
    }

    if (!securityChecks.circuitBreaker) {
      result.suggestions.push({
        message: '–î–æ–±–∞–≤—å—Ç–µ emergency stop –º–µ—Ö–∞–Ω–∏–∑–º',
        example: 'bool public emergency = false; modifier notInEmergency() { require(!emergency, "Emergency mode active"); _; }',
        priority: 'high'
      })
    }
  }

  // üîç **–§–£–ù–ö–¶–ò–ò –ü–†–û–í–ï–†–ö–ò**
  
  private checkRule(rule: ValidationRule): boolean {
    switch (rule.type) {
      case 'contains':
        return this.code.includes(rule.value)
      case 'function_exists':
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
        if (rule.value === 'constructor') {
          return this.checkConstructor()
        }
        return this.checkFunction(rule.value)
      case 'modifier_used':
        return this.checkModifier(rule.value)
      case 'require_statement':
        return this.checkRequireStatements()
      case 'custom':
        return this.checkCustomRule(rule.value)
      default:
        return false
    }
  }

  private checkFunction(functionName: string): boolean {
    const regex = new RegExp(`function\\s+${functionName}\\s*\\(`)
    return regex.test(this.code)
  }

  private checkModifier(modifierName: string): boolean {
    const regex = new RegExp(`modifier\\s+${modifierName}\\s*\\(`)
    return regex.test(this.code)
  }

  private checkConstructor(): boolean {
    // –ë–æ–ª–µ–µ —Ç–æ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ —Å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º
    const constructorPattern = /constructor\s*\(/i
    const result = constructorPattern.test(this.code)
    console.log(`üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞: ${result ? '‚úÖ –Ω–∞–π–¥–µ–Ω' : '‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω'} (pattern: /constructor\\s*\\(/)`);
    return result
  }

  private checkMapping(): boolean {
    return this.code.includes('mapping(')
  }

  private checkOwnerVariable(): boolean {
    return this.code.includes('owner') && this.code.includes('address')
  }

  private checkPayable(): boolean {
    return this.code.includes('payable')
  }

  private checkRequireStatements(): boolean {
    return this.code.includes('require(')
  }

  private checkVotingMapping(): boolean {
    return this.code.includes('mapping(address => bool)') || this.code.includes('hasVoted')
  }

  private checkAccessControl(): boolean {
    return this.code.includes('onlyOwner') || this.code.includes('msg.sender')
  }

  private checkStruct(): boolean {
    return this.code.includes('struct ')
  }

  private checkEvents(): boolean {
    return this.code.includes('event ')
  }

  private checkNFTStruct(): boolean {
    return this.code.includes('struct NFT') || this.code.includes('struct Token')
  }

  private checkMetadata(): boolean {
    return this.code.includes('metadata') || this.code.includes('tokenURI')
  }

  private checkGovernanceTokens(): boolean {
    return this.code.includes('mapping(address => uint256)') && 
           (this.code.includes('tokens') || this.code.includes('balanceOf'))
  }

  private checkProposalSystem(): boolean {
    return this.code.includes('struct Proposal') || this.code.includes('proposals')
  }

  private checkVotingMechanism(): boolean {
    return this.checkFunction('vote') && this.code.includes('proposals')
  }

  private checkTimelock(): boolean {
    return this.code.includes('endTime') || this.code.includes('timestamp')
  }

  private checkDelegation(): boolean {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ DAO
    const hasDelegateWord = this.code.includes('delegate') || this.code.includes('delegated')
    const hasTokenVoting = this.code.includes('tokens[msg.sender]') && this.code.includes('votes')
    const hasProposalSystem = this.code.includes('Proposal') && this.code.includes('vote')
    const hasVotingLogic = this.code.includes('voted[msg.sender]') || this.code.includes('votes +=')
    
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:`);
    console.log(`   - –°–ª–æ–≤–æ delegate: ${hasDelegateWord}`);
    console.log(`   - –¢–æ–∫–µ–Ω –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ: ${hasTokenVoting}`);
    console.log(`   - –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: ${hasProposalSystem}`);
    console.log(`   - –õ–æ–≥–∏–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: ${hasVotingLogic}`);
    
    // –ü–∞—Ç—Ç–µ—Ä–Ω –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º, –µ—Å–ª–∏ –µ—Å—Ç—å:
    // 1. –°–∏—Å—Ç–µ–º–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞–º–∏ –ò–õ–ò
    // 2. –Ø–≤–Ω–æ–µ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ò–õ–ò  
    // 3. –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º
    const result = hasDelegateWord || (hasTokenVoting && hasProposalSystem) || hasVotingLogic
    console.log(`   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: ${result}`);
    return result
  }

  private checkReentrancyGuard(): boolean {
    return this.code.includes('ReentrancyGuard') || this.code.includes('nonReentrant')
  }

  private checkChecksEffectsInteractions(): boolean {
    // –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ Checks-Effects-Interactions
    const lines = this.code.split('\n').map(line => line.trim())
    
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ Checks-Effects-Interactions:`);
    
    // –ò—â–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ –≤—ã–∑–æ–≤–∞–º–∏
    let hasCorrectPattern = false
    let foundWithdrawFunction = false
    
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i]
      
      // –ò—â–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–∏–ø–∞ withdraw, transfer –∏ —Ç.–¥.
      if (line.includes('function') && (line.includes('withdraw') || line.includes('transfer') || line.includes('send'))) {
        foundWithdrawFunction = true
        console.log(`   üìç –ù–∞–π–¥–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è: ${line}`);
        
        // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        let hasChecks = false
        let hasEffects = false
        let hasInteractions = false
        let checksBeforeEffects = false
        let effectsBeforeInteractions = false
        
        for (let j = i + 1; j < Math.min(i + 20, lines.length); j++) {
          const currentLine = lines[j]
          
          // –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞ —Ñ—É–Ω–∫—Ü–∏–∏
          if (currentLine.includes('}') && currentLine.length <= 5) break
          
          // Checks: require, assert
          if (currentLine.includes('require(') || currentLine.includes('assert(')) {
            if (!hasEffects && !hasInteractions) {
              hasChecks = true
              checksBeforeEffects = true
              console.log(`   ‚úÖ Checks: ${currentLine}`);
            }
          }
          
          // Effects: –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–±–∞–ª–∞–Ω—Å—ã, –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ)
          if ((currentLine.includes('balances[') && currentLine.includes('=')) ||
              (currentLine.includes('=') && !currentLine.includes('require') && !currentLine.includes('call'))) {
            if (hasChecks && !hasInteractions) {
              hasEffects = true
              effectsBeforeInteractions = true
              console.log(`   ‚úÖ Effects: ${currentLine}`);
            }
          }
          
          // Interactions: –≤–Ω–µ—à–Ω–∏–µ –≤—ã–∑–æ–≤—ã
          if (currentLine.includes('call{') || currentLine.includes('.transfer(') || currentLine.includes('.send(')) {
            if (hasChecks && hasEffects) {
              hasInteractions = true
              console.log(`   ‚úÖ Interactions: ${currentLine}`);
            }
          }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ç—Ç–µ—Ä–Ω —Å–æ–±–ª—é–¥–µ–Ω
        if (checksBeforeEffects && effectsBeforeInteractions && hasChecks && hasEffects && hasInteractions) {
          hasCorrectPattern = true
          console.log(`   üéâ –ü–∞—Ç—Ç–µ—Ä–Ω CEI –Ω–∞–π–¥–µ–Ω –≤ —Ñ—É–Ω–∫—Ü–∏–∏!`);
          break
        }
      }
    }
    
    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –µ—Å—Ç—å nonReentrant –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
    const hasNonReentrant = this.code.includes('nonReentrant')
    const hasStateChangeBeforeCall = this.checkStateChangeBeforeCall()
    
    if (hasNonReentrant && hasStateChangeBeforeCall) {
      console.log(`   ‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: nonReentrant + –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞`);
      hasCorrectPattern = true
    }
    
    console.log(`   üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ CEI: ${hasCorrectPattern} (—Ñ—É–Ω–∫—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞: ${foundWithdrawFunction})`);
    return hasCorrectPattern
  }
  
  private checkStateChangeBeforeCall(): boolean {
    const lines = this.code.split('\n')
    let stateChangeIndex = -1
    let callIndex = -1
    
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i].trim()
      
      // –ò—â–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      if ((line.includes('balances[') && line.includes('-=')) || 
          (line.includes('=') && line.includes('msg.sender') && !line.includes('require'))) {
        stateChangeIndex = i
      }
      
      // –ò—â–µ–º –≤–Ω–µ—à–Ω–∏–π –≤—ã–∑–æ–≤ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
      if (stateChangeIndex !== -1 && (line.includes('call{') || line.includes('.transfer('))) {
        callIndex = i
        break
      }
    }
    
    return stateChangeIndex !== -1 && callIndex !== -1 && stateChangeIndex < callIndex
  }

  private checkCircuitBreaker(): boolean {
    return this.code.includes('emergency') || this.code.includes('pause')
  }

  private checkInputValidation(): boolean {
    return this.code.includes('require(') && this.code.includes('msg.')
  }

  private checkOverflowProtection(): boolean {
    return this.code.includes('SafeMath') || this.code.includes('unchecked') || 
           this.code.includes('pragma solidity ^0.8')
  }

  private checkCustomRule(ruleName: string): boolean {
    switch (ruleName) {
      case 'checks_effects_interactions':
        return this.checkChecksEffectsInteractions()
      case 'delegation_pattern':
        return this.checkDelegation()
      case 'governance_pattern':
        return this.checkGovernanceTokens() && this.checkProposalSystem()
      default:
        return false
    }
  }

  // üîß **–í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò**
  
  private findRuleLine(rule: ValidationRule): number {
    // –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–∞–≤–∏–ª–æ
    for (let i = 0; i < this.lines.length; i++) {
      if (this.lines[i].includes(rule.value)) {
        return i + 1
      }
    }
    return 1
  }

  private validateBraces(result: ValidationResult): void {
    let openBraces = 0
    
    for (let i = 0; i < this.code.length; i++) {
      if (this.code[i] === '{') openBraces++
      if (this.code[i] === '}') openBraces--
      
      if (openBraces < 0) {
        result.errors.push({
          line: this.getLineNumber(i),
          column: this.getColumnNumber(i),
          message: '–õ–∏—à–Ω—è—è –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞',
          type: 'syntax',
          severity: 'error'
        })
        return
      }
    }
    
    if (openBraces > 0) {
      result.errors.push({
        line: this.lines.length,
        column: 1,
        message: '–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö —Å–∫–æ–±–æ–∫',
        type: 'syntax',
        severity: 'error'
      })
    }
  }

  private validateSemicolons(result: ValidationResult): void {
    const requiredSemicolonLines = this.lines.filter(line => 
      line.trim().length > 0 &&
      !line.trim().startsWith('//') &&
      !line.trim().startsWith('/*') &&
      !line.trim().includes('{') &&
      !line.trim().includes('}') &&
      !line.includes('pragma') &&
      !line.includes('import') &&
      !line.includes('contract') &&
      !line.includes('function') &&
      !line.includes('modifier') &&
      !line.includes('struct') &&
      !line.includes('event') &&
      line.includes('=')
    )
    
    requiredSemicolonLines.forEach((line, index) => {
      if (!line.trim().endsWith(';')) {
        result.warnings.push({
          line: this.lines.indexOf(line) + 1,
          column: line.length,
          message: '–í–æ–∑–º–æ–∂–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π',
          suggestion: '–î–æ–±–∞–≤—å—Ç–µ ; –≤ –∫–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏'
        })
      }
    })
  }

  private getLineNumber(position: number): number {
    return this.code.substring(0, position).split('\n').length
  }

  private getColumnNumber(position: number): number {
    const beforePosition = this.code.substring(0, position)
    const lastNewLine = beforePosition.lastIndexOf('\n')
    return position - lastNewLine
  }

  private calculateScore(result: ValidationResult): void {
    let baseScore = 100
    
    // –°–Ω–∏–º–∞–µ–º –±–∞–ª–ª—ã –∑–∞ –æ—à–∏–±–∫–∏
    baseScore -= result.errors.length * 15
    baseScore -= result.warnings.length * 5
    
    // –ë–æ–Ω—É—Å—ã –∑–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º —É—Ä–æ–≤–Ω—è
    const requiredElements = Object.values(result.levelSpecificChecks.requiredElements)
    const requiredElementsScore = requiredElements.length > 0 
      ? (requiredElements.filter(Boolean).length / requiredElements.length) * 30
      : 0
    
    const securityPatterns = Object.values(result.levelSpecificChecks.securityPatterns)
    const securityScore = securityPatterns.length > 0
      ? (securityPatterns.filter(Boolean).length / securityPatterns.length) * 20
      : 0
    
    baseScore += requiredElementsScore + securityScore
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω 0-100
    result.score = Math.max(0, Math.min(100, Math.round(baseScore)))
    result.isValid = result.errors.length === 0 && result.score >= 60
    
    // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —É—Ä–æ–≤–Ω—é
    const totalChecks = requiredElements.length + securityPatterns.length
    const passedChecks = requiredElements.filter(Boolean).length + securityPatterns.filter(Boolean).length
    result.levelSpecificChecks.overallCompliance = totalChecks > 0 ? (passedChecks / totalChecks) * 100 : 0
  }
}

// üéØ **–≠–ö–°–ü–û–†–¢ –û–°–ù–û–í–ù–´–• –§–£–ù–ö–¶–ò–ô**

export const validateSolidityCode = (code: string, level: number = 1): ValidationResult => {
  const validator = new CodeValidator(code)
  return validator.validateCode(level)
}

export const getCodeQualityScore = (code: string, level: number = 1): number => {
  const result = validateSolidityCode(code, level)
  return result.score
}

export const isCodeValid = (code: string, level: number = 1): boolean => {
  const result = validateSolidityCode(code, level)
  return result.isValid
}

export default CodeValidator 