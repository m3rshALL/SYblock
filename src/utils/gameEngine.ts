import { Enemy, Tower, EnemyAbility, TowerAbility, TemporalEffect, EnemyType, TowerType } from '../types/game'
import { ENEMY_STATS, TOWER_STATS } from '../data/levelConfigs'

// üéÆ **–ò–ì–†–û–í–û–ô –î–í–ò–ñ–û–ö SMART YOU**

export class GameEngine {
  private currentTime: number = Date.now()
  
  // üëæ **–°–ò–°–¢–ï–ú–ê –°–ü–û–°–û–ë–ù–û–°–¢–ï–ô –í–†–ê–ì–û–í**
  
  useEnemyAbility(enemy: Enemy, abilityId: string): boolean {
    const ability = enemy.abilities?.find(a => a.id === abilityId)
    if (!ability) return false
    
    const now = this.currentTime
    if (ability.lastUsed && (now - ability.lastUsed) < ability.cooldown) {
      return false // –ö—É–ª–¥–∞—É–Ω –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è
    }
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
    ability.lastUsed = now
    this.applyEnemyAbility(enemy, ability)
    return true
  }
  
  private applyEnemyAbility(enemy: Enemy, ability: EnemyAbility): void {
    switch (ability.type) {
      case 'teleport':
        this.teleportEnemy(enemy)
        break
      case 'clone':
        this.cloneEnemy(enemy)
        break
      case 'invisibility':
        this.makeEnemyInvisible(enemy)
        break
      case 'shield':
        this.shieldEnemy(enemy)
        break
      case 'heal':
        this.healEnemy(enemy)
        break
    }
  }
  
  private teleportEnemy(enemy: Enemy): void {
    // üîÑ –¢–µ–ª–µ–ø–æ—Ä—Ç: –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç –≤—Ä–∞–≥–∞ –Ω–∞ 100px –≤–ø–µ—Ä–µ–¥
    enemy.x += 100
    console.log(`${ENEMY_STATS[enemy.type]?.icon} ${enemy.id} —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª—Å—è!`)
  }
  
  private cloneEnemy(enemy: Enemy): Enemy | null {
    // üë• –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: —Å–æ–∑–¥–∞–µ—Ç –∫–æ–ø–∏—é –≤—Ä–∞–≥–∞
    const clone: Enemy = {
      ...enemy,
      id: `${enemy.id}-clone`,
      x: enemy.x - 50,
      health: enemy.health * 0.5 // –ö–ª–æ–Ω —Å–ª–∞–±–µ–µ
    }
    console.log(`${ENEMY_STATS[enemy.type]?.icon} ${enemy.id} —Å–æ–∑–¥–∞–ª –∫–ª–æ–Ω–∞!`)
    return clone
  }
  
  private makeEnemyInvisible(enemy: Enemy): void {
    // üëª –ù–µ–≤–∏–¥–∏–º–æ—Å—Ç—å: –≤—Ä–∞–≥ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–µ–≤–∏–¥–∏–º—ã–º –Ω–∞ 3 —Å–µ–∫—É–Ω–¥—ã
    const invisibilityEffect: TemporalEffect = {
      id: 'invisibility',
      type: 'slow',
      duration: 3000,
      strength: 1,
      appliedAt: this.currentTime
    }
    enemy.effects = enemy.effects || []
    enemy.effects.push(invisibilityEffect)
    console.log(`${ENEMY_STATS[enemy.type]?.icon} ${enemy.id} —Å—Ç–∞–ª –Ω–µ–≤–∏–¥–∏–º—ã–º!`)
  }
  
  private shieldEnemy(enemy: Enemy): void {
    // üõ°Ô∏è –©–∏—Ç: —É–º–µ–Ω—å—à–∞–µ—Ç –ø–æ–ª—É—á–∞–µ–º—ã–π —É—Ä–æ–Ω –Ω–∞ 50% –Ω–∞ 5 —Å–µ–∫—É–Ω–¥
    const shieldEffect: TemporalEffect = {
      id: 'shield',
      type: 'slow',
      duration: 5000,
      strength: 0.5,
      appliedAt: this.currentTime
    }
    enemy.effects = enemy.effects || []
    enemy.effects.push(shieldEffect)
    console.log(`${ENEMY_STATS[enemy.type]?.icon} ${enemy.id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª —â–∏—Ç!`)
  }
  
  private healEnemy(enemy: Enemy): void {
    // üíö –õ–µ—á–µ–Ω–∏–µ: –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç 30% –∑–¥–æ—Ä–æ–≤—å—è
    const healAmount = Math.floor(enemy.maxHealth * 0.3)
    enemy.health = Math.min(enemy.health + healAmount, enemy.maxHealth)
    console.log(`${ENEMY_STATS[enemy.type]?.icon} ${enemy.id} –≤—ã–ª–µ—á–∏–ª—Å—è –Ω–∞ ${healAmount} HP!`)
  }
  
  // üè∞ **–°–ò–°–¢–ï–ú–ê –°–ü–û–°–û–ë–ù–û–°–¢–ï–ô –ë–ê–®–ï–ù**
  
  useTowerAbility(tower: Tower, abilityId: string, enemies: Enemy[]): boolean {
    const ability = tower.specialAbilities?.find(a => a.id === abilityId)
    if (!ability) return false
    
    const now = this.currentTime
    if (ability.lastUsed && (now - ability.lastUsed) < ability.cooldown) {
      return false
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Å—É—Ä—Å—ã
    if (ability.manaCost && tower.resources) {
      if (tower.resources.energy < ability.manaCost) {
        return false // –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏
      }
      tower.resources.energy -= ability.manaCost
    }
    
    ability.lastUsed = now
    this.applyTowerAbility(tower, ability, enemies)
    return true
  }
  
  private applyTowerAbility(tower: Tower, ability: TowerAbility, enemies: Enemy[]): void {
    switch (ability.type) {
      case 'area_damage':
        this.towerAreaDamage(tower, enemies)
        break
      case 'slow_effect':
        this.towerSlowEffect(tower, enemies)
        break
      case 'shield':
        this.towerShieldAllies(tower)
        break
      case 'heal_allies':
        this.towerHealAllies(tower)
        break
      case 'combo_boost':
        this.towerComboBoost(tower)
        break
    }
  }
  
  private towerAreaDamage(tower: Tower, enemies: Enemy[]): void {
    // üí• –£—Ä–æ–Ω –ø–æ –æ–±–ª–∞—Å—Ç–∏: –Ω–∞–Ω–æ—Å–∏—Ç —É—Ä–æ–Ω –≤—Å–µ–º –≤—Ä–∞–≥–∞–º –≤ —Ä–∞–¥–∏—É—Å–µ
    const areaRange = tower.range * 1.5
    const areaDamage = tower.damage * 0.8
    
    enemies.forEach(enemy => {
      const distance = Math.sqrt(
        Math.pow(enemy.x - tower.x, 2) + Math.pow(enemy.y - tower.y, 2)
      )
      
      if (distance <= areaRange) {
        this.damageEnemy(enemy, areaDamage)
        console.log(`${TOWER_STATS[tower.type]?.icon} –ë–∞—à–Ω—è –Ω–∞–Ω–µ—Å–ª–∞ ${areaDamage} —É—Ä–æ–Ω–∞ –ø–æ –æ–±–ª–∞—Å—Ç–∏!`)
      }
    })
  }
  
  private towerSlowEffect(tower: Tower, enemies: Enemy[]): void {
    // ‚ùÑÔ∏è –ó–∞–º–µ–¥–ª–µ–Ω–∏–µ: –∑–∞–º–µ–¥–ª—è–µ—Ç –≤—Å–µ—Ö –≤—Ä–∞–≥–æ–≤ –≤ —Ä–∞–¥–∏—É—Å–µ –Ω–∞ 50%
    enemies.forEach(enemy => {
      const distance = Math.sqrt(
        Math.pow(enemy.x - tower.x, 2) + Math.pow(enemy.y - tower.y, 2)
      )
      
      if (distance <= tower.range) {
        const slowEffect: TemporalEffect = {
          id: 'slow',
          type: 'slow',
          duration: 3000,
          strength: 0.5,
          appliedAt: this.currentTime
        }
        enemy.effects = enemy.effects || []
        enemy.effects.push(slowEffect)
      }
    })
    console.log(`${TOWER_STATS[tower.type]?.icon} –ë–∞—à–Ω—è –∑–∞–º–µ–¥–ª–∏–ª–∞ –≤—Ä–∞–≥–æ–≤!`)
  }
  
  private towerShieldAllies(tower: Tower): void {
    // üõ°Ô∏è –©–∏—Ç —Å–æ—é–∑–Ω–∏–∫–∞–º: —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∑–∞—â–∏—Ç—É —Å–æ—Å–µ–¥–Ω–∏—Ö –±–∞—à–µ–Ω
    console.log(`${TOWER_STATS[tower.type]?.icon} –ë–∞—à–Ω—è –∑–∞—â–∏—Ç–∏–ª–∞ —Å–æ—é–∑–Ω–∏–∫–æ–≤!`)
  }
  
  private towerHealAllies(tower: Tower): void {
    // üíö –õ–µ—á–µ–Ω–∏–µ —Å–æ—é–∑–Ω–∏–∫–æ–≤: –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç "–∑–¥–æ—Ä–æ–≤—å–µ" —Å–æ—Å–µ–¥–Ω–∏—Ö –±–∞—à–µ–Ω
    console.log(`${TOWER_STATS[tower.type]?.icon} –ë–∞—à–Ω—è –≤—ã–ª–µ—á–∏–ª–∞ —Å–æ—é–∑–Ω–∏–∫–æ–≤!`)
  }
  
  private towerComboBoost(tower: Tower): void {
    // ‚ö° –ö–æ–º–±–æ —É—Å–∏–ª–µ–Ω–∏–µ: —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —É—Ä–æ–Ω —Å–æ—Å–µ–¥–Ω–∏—Ö –±–∞—à–µ–Ω –Ω–∞ 50%
    console.log(`${TOWER_STATS[tower.type]?.icon} –ë–∞—à–Ω—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∞ –∫–æ–º–±–æ!`)
  }
  
  // üéØ **–°–ò–°–¢–ï–ú–ê –£–†–û–ù–ê –ò –≠–§–§–ï–ö–¢–û–í**
  
  damageEnemy(enemy: Enemy, damage: number): void {
    let actualDamage = damage
    const oldHealth = enemy.health
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã
    if (enemy.effects) {
      enemy.effects.forEach(effect => {
        if (effect.id === 'shield' && effect.appliedAt + effect.duration > this.currentTime) {
          actualDamage *= (1 - effect.strength) // –©–∏—Ç —É–º–µ–Ω—å—à–∞–µ—Ç —É—Ä–æ–Ω
        }
      })
    }
    
    enemy.health -= actualDamage
    if (enemy.health < 0) enemy.health = 0
    
    console.log(`üí• GameEngine.damageEnemy: ${enemy.id} –ø–æ–ª—É—á–∏–ª ${actualDamage} —É—Ä–æ–Ω–∞ (${oldHealth}‚Üí${enemy.health} HP)`);
  }
  
  updateEnemyEffects(enemy: Enemy): void {
    if (!enemy.effects) return
    
    const now = this.currentTime
    
    // –£–¥–∞–ª—è–µ–º –∏—Å—Ç–µ–∫—à–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
    enemy.effects = enemy.effects.filter(effect => 
      effect.appliedAt + effect.duration > now
    )
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
    enemy.effects.forEach(effect => {
      switch (effect.type) {
        case 'burn':
          if (now - effect.appliedAt > 1000) { // –£—Ä–æ–Ω –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
            this.damageEnemy(enemy, effect.strength)
          }
          break
        case 'poison':
          if (now - effect.appliedAt > 500) { // –£—Ä–æ–Ω –∫–∞–∂–¥—ã–µ 0.5 —Å–µ–∫—É–Ω–¥—ã
            this.damageEnemy(enemy, effect.strength * 0.5)
          }
          break
        case 'freeze':
          // –í—Ä–∞–≥ –Ω–µ –º–æ–∂–µ—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è
          break
        case 'stun':
          // –í—Ä–∞–≥ –Ω–µ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
          break
      }
    })
  }
  
  // üèÜ **–°–ò–°–¢–ï–ú–ê –ë–û–°–°–û–í**
  
  spawnBoss(bossType: EnemyType, x: number, y: number): Enemy {
    const bossStats = ENEMY_STATS[bossType]
    
    const boss: Enemy = {
      id: `boss-${bossType}`,
      x,
      y,
      health: bossStats.health * 3, // –ë–æ—Å—Å—ã –≤ 3 —Ä–∞–∑–∞ —Å–∏–ª—å–Ω–µ–µ
      maxHealth: bossStats.health * 3,
      speed: bossStats.speed * 0.8, // –ù–æ –º–µ–¥–ª–µ–Ω–Ω–µ–µ
      type: bossType,
      isBoss: true,
      reward: bossStats.reward * 5,
      abilities: bossStats.abilities.map(ability => ({
        ...ability,
        cooldown: ability.cooldown * 0.7 // –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —á–∞—â–µ
      }))
    }
    
    console.log(`üëë –ë–û–°–° –ü–û–Ø–í–ò–õ–°–Ø: ${bossStats.icon} ${boss.id}!`)
    return boss
  }
  
  // üîÑ **–°–ò–°–¢–ï–ú–ê –†–ï–°–£–†–°–û–í**
  
  updateResources(tower: Tower, deltaTime: number): void {
    if (!tower.resources) return
    
    const stats = TOWER_STATS[tower.type]
    if (!stats) return
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
    tower.resources.gas = Math.min(
      tower.resources.gas + (stats.cost.gas * 0.1 * deltaTime / 1000),
      100
    )
    tower.resources.tokens = Math.min(
      tower.resources.tokens + (stats.cost.tokens * 0.1 * deltaTime / 1000), 
      100
    )
    tower.resources.energy = Math.min(
      tower.resources.energy + (stats.cost.energy * 0.2 * deltaTime / 1000),
      100
    )
  }
  
  // üé™ **–°–ò–°–¢–ï–ú–ê –ö–û–ú–ë–û**
  
  checkComboSystem(towers: Tower[]): number {
    let comboMultiplier = 1.0
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –±–∞—à–µ–Ω
    const towerTypes = towers.map(t => t.type)
    
    // –ö–æ–º–±–æ "–í–∞–ª–∏–¥–∞—Ü–∏—è": validator + access_controller
    if (towerTypes.includes('validator') && towerTypes.includes('access_controller')) {
      comboMultiplier *= 1.5
      console.log('üî• –ö–æ–º–±–æ "–í–∞–ª–∏–¥–∞—Ü–∏—è" –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ! (+50% —É—Ä–æ–Ω–∞)')
    }
    
    // –ö–æ–º–±–æ "–ê—É–¥–∏—Ç": auditor + escrow_guard  
    if (towerTypes.includes('auditor') && towerTypes.includes('escrow_guard')) {
      comboMultiplier *= 1.8
      console.log('üî• –ö–æ–º–±–æ "–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è" –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ! (+80% —É—Ä–æ–Ω–∞)')
    }
    
    // –ö–æ–º–±–æ "DAO –ó–∞—â–∏—Ç–∞": delegate + governance_guard
    if (towerTypes.includes('delegate') && towerTypes.includes('governance_guard')) {
      comboMultiplier *= 2.2
      console.log('üî• –ö–æ–º–±–æ "DAO –ó–∞—â–∏—Ç–∞" –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ! (+120% —É—Ä–æ–Ω–∞)')
    }
    
    // –§–∏–Ω–∞–ª—å–Ω–æ–µ –∫–æ–º–±–æ: –≤—Å–µ —Ç–∏–ø—ã –∑–∞—â–∏—Ç—ã –æ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if (towerTypes.includes('reentrancy_guard') && 
        towerTypes.includes('circuit_breaker') && 
        towerTypes.includes('mev_protector')) {
      comboMultiplier *= 3.0
      console.log('üî•üî•üî• –ú–ï–ì–ê –ö–û–ú–ë–û "–ê–±—Å–æ–ª—é—Ç–Ω–∞—è –ó–∞—â–∏—Ç–∞" –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ! (+200% —É—Ä–æ–Ω–∞)')
    }
    
    return comboMultiplier
  }
  
  // üé≤ **–°–õ–£–ß–ê–ô–ù–´–ï –°–û–ë–´–¢–ò–Ø**
  
  generateRandomEvent(): string | null {
    const events = [
      '‚ö° –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –≤—Å–ø–ª–µ—Å–∫: +50% —É—Ä–æ–Ω–∞ –≤—Å–µ—Ö –±–∞—à–µ–Ω –Ω–∞ 10 —Å–µ–∫—É–Ω–¥!',
      'üõ°Ô∏è –ó–∞—â–∏—Ç–Ω—ã–π –±–∞—Ä—å–µ—Ä: –≤—Å–µ –≤—Ä–∞–≥–∏ –ø–æ–ª—É—á–∞—é—Ç -30% —É—Ä–æ–Ω–∞ –Ω–∞ 8 —Å–µ–∫—É–Ω–¥!', 
      'üí∞ –ë–æ–Ω—É—Å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã: +100 –≥–∞–∑–∞, +50 —Ç–æ–∫–µ–Ω–æ–≤!',
      'üîÑ –ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞: –≤—Å–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–∞—à–µ–Ω –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!',
      'üëæ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–æ–ª–Ω–∞: –ø–æ—è–≤–ª—è—é—Ç—Å—è 3 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤—Ä–∞–≥–∞!',
    ]
    
    if (Math.random() < 0.1) { // 10% —à–∞–Ω—Å –∫–∞–∂–¥—ã–π —Ü–∏–∫–ª
      return events[Math.floor(Math.random() * events.length)]
    }
    
    return null
  }
  
  // üèÅ **–ü–†–û–í–ï–†–ö–ê –ü–û–ë–ï–î–´/–ü–û–†–ê–ñ–ï–ù–ò–Ø**
  
  checkGameEndConditions(enemies: Enemy[], lives: number, bossDefeated: boolean): 'victory' | 'defeat' | 'continue' {
    console.log(`üèÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –∏–≥—Ä—ã: enemies=${enemies.length}, lives=${lives}, bossDefeated=${bossDefeated}`);
    
    if (lives <= 0) {
      console.log(`üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–µ: –∂–∏–∑–Ω–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å`);
      return 'defeat'
    }
    
    // –ü–æ–±–µ–¥–∞: –≤—Å–µ –≤—Ä–∞–≥–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω—ã
    if (enemies.length === 0) {
      console.log(`üèÜ –ü–æ–±–µ–¥–∞: –≤—Å–µ –≤—Ä–∞–≥–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω—ã!`);
      return 'victory'
    }
    
    return 'continue'
  }
  
  // ‚è±Ô∏è **–û–ë–ù–û–í–õ–ï–ù–ò–ï –í–†–ï–ú–ï–ù–ò**
  
  updateTime(): void {
    this.currentTime = Date.now()
  }
}

// üéØ **–í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò**

export const calculateDistance = (x1: number, y1: number, x2: number, y2: number): number => {
  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2))
}

export const getEnemyIcon = (enemyType: EnemyType): string => {
  return ENEMY_STATS[enemyType]?.icon || '‚ùì'
}

export const getTowerIcon = (towerType: TowerType): string => {
  return TOWER_STATS[towerType]?.icon || '‚ùì'
}

export const formatDamage = (damage: number): string => {
  return damage.toFixed(0)
}

export const formatHealth = (health: number, maxHealth: number): string => {
  return `${health.toFixed(0)}/${maxHealth.toFixed(0)}`
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–≤–∏–∂–∫–∞
export const gameEngine = new GameEngine()
export default gameEngine 