import { Player, Achievement } from '@/types/game'

const STORAGE_KEY = 'smart-you-game-progress'
const PLAYER_NAME_KEY = 'smart-you-player-name'

export interface GameProgress {
  player: Player
  unlockedLevels: number[]
  completedLevels: number[]
  achievements: Achievement[]
  totalXP: number
  currentLevel: number
  playTime: number // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  lastPlayed: string
}

// –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
const DEFAULT_ACHIEVEMENTS: Achievement[] = [
  {
    id: 'first_steps',
    title: '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏',
    description: '–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã',
    icon: 'üë∂',
    unlocked: false,
    xpReward: 10
  },
  {
    id: 'beginner_coder',
    title: '–ù–æ–≤–∏—á–æ–∫ –≤ –∫–æ–¥–µ',
    description: '–°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç',
    icon: 'üíª',
    unlocked: false,
    xpReward: 25
  },
  {
    id: 'democracy_defender',
    title: '–ó–∞—â–∏—Ç–Ω–∏–∫ –¥–µ–º–æ–∫—Ä–∞—Ç–∏–∏',
    description: '–°–æ–∑–¥–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è',
    icon: 'üó≥Ô∏è',
    unlocked: false,
    xpReward: 50
  },
  {
    id: 'nft_crafter',
    title: 'NFT-–∫—É–∑–Ω–µ—Ü',
    description: '–°–æ–∑–¥–∞—Ç—å —Ç–æ—Ä–≥–æ–≤—É—é –ø–ª–æ—â–∞–¥–∫—É',
    icon: '‚öíÔ∏è',
    unlocked: false,
    xpReward: 75
  },
  {
    id: 'dao_master',
    title: 'DAO-–º–∞—Å—Ç–µ—Ä',
    description: '–°–æ–∑–¥–∞—Ç—å DAO —Å —Ç–æ–∫–µ–Ω–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
    icon: 'üèõÔ∏è',
    unlocked: false,
    xpReward: 100
  },
  {
    id: 'security_guardian',
    title: '–°—Ç—Ä–∞–∂ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
    description: '–ò—Å–ø—Ä–∞–≤–∏—Ç—å —É—è–∑–≤–∏–º–æ—Å—Ç—å —Ä–µ–µ–Ω—Ç—Ä–∞–Ω—Å–∏',
    icon: 'üõ°Ô∏è',
    unlocked: false,
    xpReward: 150
  },
  {
    id: 'blockchain_guardian',
    title: '–°—Ç—Ä–∞–∂ –±–ª–æ–∫—á–µ–π–Ω–∞',
    description: '–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ 5 —É—Ä–æ–≤–Ω–µ–π',
    icon: 'üëë',
    unlocked: false,
    xpReward: 200
  },
  {
    id: 'speed_runner',
    title: '–°–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –±–µ–≥—É–Ω',
    description: '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 2 —á–∞—Å–∞',
    icon: '‚ö°',
    unlocked: false,
    xpReward: 100
  },
  {
    id: 'perfectionist',
    title: '–ü–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏—Å—Ç',
    description: '–ü—Ä–æ–π—Ç–∏ –≤—Å–µ —É—Ä–æ–≤–Ω–∏ —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏',
    icon: 'üåü',
    unlocked: false,
    xpReward: 250
  },
  {
    id: 'code_master',
    title: '–ú–∞—Å—Ç–µ—Ä –∫–æ–¥–∞',
    description: '–ù–∞–ø–∏—Å–∞—Ç—å 1000+ —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞',
    icon: 'üî•',
    unlocked: false,
    xpReward: 150
  }
]

export class GameStorage {
  static readonly DEFAULT_PLAYER_NAME = '–•—Ä–∞–Ω–∏—Ç–µ–ª—å –ë–ª–æ–∫—á–µ–π–Ω–∞'
  // –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–∑ localStorage
  static getProgress(): GameProgress {
    // –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ë–î: —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç, –∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞–µ–º —á–µ—Ä–µ–∑ getProgressFromDB
    return this.getDefaultProgress()
  }

  // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —á—Ç–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–∑ –ë–î
  static async getProgressFromDB(playerName: string): Promise<GameProgress> {
    try {
      const res = await fetch('/api/progress?name=' + encodeURIComponent(playerName), { cache: 'no-store' })
      const data = await res.json()
      if (!data?.ok) return this.getDefaultProgress()

      const completed = (data.completedLevels || []).map((c: any) => c.levelId)
      const unlocked = (data.unlockedLevels || []).map((u: any) => u.levelId)
      const achievements: Achievement[] = (data.achievements || []).map((a: any) => ({
        id: a.id,
        title: a.title,
        description: a.description,
        icon: a.icon,
        unlocked: !!a.unlocked,
        xpReward: a.xpReward,
      }))

      const gp: GameProgress = {
        player: {
          id: data.user?.id || 'unknown',
          name: data.user?.name || this.DEFAULT_PLAYER_NAME,
          xp: data.progress?.totalXP ?? 0,
          level: Math.max(1, Math.floor((data.progress?.totalXP ?? 0) / 100) + 1),
          achievements,
          completedLevels: completed,
        },
        unlockedLevels: unlocked.length > 0 ? unlocked : [1],
        completedLevels: completed,
        achievements,
        totalXP: data.progress?.totalXP ?? 0,
        currentLevel: data.progress?.currentLevel ?? 1,
        playTime: data.progress?.playTime ?? 0,
        lastPlayed: data.progress?.lastPlayed ?? new Date().toISOString(),
      }

      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ —Å –ë–î, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (best-effort)
      try {
        const levelCodes = Array.from({ length: 5 }, (_, i) => {
          const levelId = i + 1
          const code = localStorage.getItem(`sy_code_level_${levelId}`) || ''
          return { levelId, code }
        })
        await fetch('/api/progress', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            name: gp.player.name,
            totalXP: gp.totalXP,
            currentLevel: gp.currentLevel,
            playTime: gp.playTime,
            completedLevels: gp.completedLevels,
            unlockedLevels: gp.unlockedLevels,
            achievements: gp.achievements,
            levelCodes,
          }),
        })
      } catch {}

      return gp
    } catch (e) {
      console.error(e)
      return this.getDefaultProgress()
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
  static saveProgress(progress: GameProgress): boolean {
    // –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥: —Å–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ API, –ª–æ–∫–∞–ª—å–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–∏—à–µ–º
    if (typeof window === 'undefined') return false
    ;(async () => {
      try {
        await fetch('/api/progress', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            name: progress.player.name,
            totalXP: progress.totalXP,
            currentLevel: progress.currentLevel,
            playTime: progress.playTime,
            completedLevels: progress.completedLevels,
            unlockedLevels: progress.unlockedLevels,
            achievements: progress.achievements,
          })
        })
      } catch {}
    })()
    return true
  }

  // –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –Ω–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
  static getDefaultProgress(): GameProgress {
    const playerId = `player_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
    
    return {
      player: {
        id: playerId,
        name: this.DEFAULT_PLAYER_NAME,
        xp: 0,
        level: 1,
        achievements: [],
        completedLevels: []
      },
      unlockedLevels: [1],
      completedLevels: [],
      achievements: [...DEFAULT_ACHIEVEMENTS],
      totalXP: 0,
      currentLevel: 1,
      playTime: 0,
      lastPlayed: new Date().toISOString()
    }
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–º—è –∏–≥—Ä–æ–∫–∞
  static setPlayerName(name: string): GameProgress {
    const progress = this.getDefaultProgress()
    progress.player.name = name
    try {
      if (typeof window !== 'undefined') {
        localStorage.setItem(PLAYER_NAME_KEY, name)
      }
    } catch {}
    this.saveProgress(progress)
    return progress
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –∏–º—è (–Ω–µ –¥–µ—Ñ–æ–ª—Ç)
  static hasCustomPlayerName(): boolean {
    try {
      if (typeof window === 'undefined') return false
      const cached = localStorage.getItem(PLAYER_NAME_KEY)
      return !!cached && cached !== this.DEFAULT_PLAYER_NAME
    } catch {
      return false
    }
  }

  // –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  static migrateProgress(progress: GameProgress): GameProgress {
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    const existingIds = progress.achievements.map(a => a.id)
    const newAchievements = DEFAULT_ACHIEVEMENTS.filter(a => !existingIds.includes(a.id))
    
    if (newAchievements.length > 0) {
      progress.achievements = [...progress.achievements, ...newAchievements]
    }

    // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (!progress.playTime) progress.playTime = 0
    if (!progress.lastPlayed) progress.lastPlayed = new Date().toISOString()
    if (!progress.unlockedLevels) progress.unlockedLevels = [1]

    return progress
  }

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
  static completeLevel(levelId: number, xpGained: number): GameProgress {
    const progress = this.getProgress()
    
    // –î–æ–±–∞–≤–ª—è–µ–º XP
    progress.totalXP += xpGained
    progress.player.xp += xpGained

    // –û—Ç–º–µ—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
    if (!progress.completedLevels.includes(levelId)) {
      progress.completedLevels.push(levelId)
      progress.player.completedLevels.push(levelId)
    }

    // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
    const nextLevel = levelId + 1
    if (nextLevel <= 5 && !progress.unlockedLevels.includes(nextLevel)) {
      progress.unlockedLevels.push(nextLevel)
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    this.checkAchievements(progress, levelId)

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä–æ–∫–∞
    progress.player.level = Math.max(1, Math.floor(progress.totalXP / 100) + 1)
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –≤ –∏–≥—Ä–µ
    progress.currentLevel = nextLevel <= 5 ? nextLevel : progress.currentLevel

    this.saveProgress(progress)
    return progress
  }

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å
  static setCurrentLevel(levelId: number): GameProgress {
    const progress = this.getProgress()
    progress.currentLevel = levelId
    progress.lastPlayed = new Date().toISOString()
    this.saveProgress(progress)
    console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: ${levelId}`)
    return progress
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  static checkAchievements(progress: GameProgress, completedLevel?: number): Achievement[] {
    const unlockedAchievements: Achievement[] = []

    progress.achievements.forEach(achievement => {
      if (achievement.unlocked) return

      let shouldUnlock = false

      switch (achievement.id) {
        case 'first_steps':
          shouldUnlock = progress.completedLevels.length >= 1
          break
        case 'beginner_coder':
          shouldUnlock = completedLevel === 1
          break
        case 'democracy_defender':
          shouldUnlock = completedLevel === 2
          break
        case 'nft_crafter':
          shouldUnlock = completedLevel === 3
          break
        case 'dao_master':
          shouldUnlock = completedLevel === 4
          break
        case 'security_guardian':
        case 'blockchain_guardian':
          shouldUnlock = progress.completedLevels.length >= 5
          break
        case 'speed_runner':
          shouldUnlock = progress.completedLevels.length >= 5 && progress.playTime < 7200 // 2 —á–∞—Å–∞
          break
        case 'perfectionist':
          // –ó–¥–µ—Å—å –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ø—ã—Ç–æ–∫
          shouldUnlock = false
          break
        case 'code_master':
          // –ü–æ–¥—Å—á–µ—Ç —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞ - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
          shouldUnlock = progress.totalXP >= 500
          break
      }

      if (shouldUnlock) {
        achievement.unlocked = true
        progress.totalXP += achievement.xpReward
        progress.player.xp += achievement.xpReward
        progress.player.achievements.push(achievement)
        unlockedAchievements.push(achievement)
      }
    })

    return unlockedAchievements
  }

  // –û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –∏–≥—Ä—ã
  static updatePlayTime(seconds: number): void {
    const progress = this.getProgress()
    progress.playTime += seconds
    this.saveProgress(progress)
  }

  // –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  static resetProgress(): GameProgress {
    if (typeof window !== 'undefined') {
      localStorage.removeItem(STORAGE_KEY)
    }
    return this.getDefaultProgress()
  }

  // –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  static exportProgress(): string {
    const progress = this.getProgress()
    return JSON.stringify(progress, null, 2)
  }

  // –ò–º–ø–æ—Ä—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  static importProgress(data: string): boolean {
    try {
      const progress = JSON.parse(data)
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
      if (!progress.player || !progress.achievements) {
        throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö')
      }
      
      this.saveProgress(progress)
      return true
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error)
      return false
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  static getStats(): {
    totalXP: number
    completedLevels: number
    totalAchievements: number
    unlockedAchievements: number
    playTime: string
    completion: number
  } {
    const progress = this.getProgress()
    const hours = Math.floor(progress.playTime / 3600)
    const minutes = Math.floor((progress.playTime % 3600) / 60)
    
    return {
      totalXP: progress.totalXP,
      completedLevels: progress.completedLevels.length,
      totalAchievements: progress.achievements.length,
      unlockedAchievements: progress.achievements.filter(a => a.unlocked).length,
      playTime: `${hours}—á ${minutes}–º`,
      completion: Math.round((progress.completedLevels.length / 5) * 100)
    }
  }
} 